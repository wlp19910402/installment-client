{"ast":null,"code":"/*\n * This optional code is used to register a service worker.\n * register() is not called by default.\n */\n\n/*\n * This lets the app load faster on subsequent visits in production, and gives\n * it offline capabilities. However, it also means that developers (and users)\n * will only see deployed updates on subsequent visits to a page, after all the\n * existing tabs open on the page have been closed, since previously cached\n * resources are updated in the background.\n */\n\n/*\n * To learn more about the benefits of this model and instructions on how to\n * opt-in, read https://bit.ly/CRA-PWA\n */\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker.register(swUrl).then(registration => {\n    registration.onupdatefound = () => {\n      const installingWorker = registration.installing;\n\n      if (installingWorker == null) {\n        return;\n      }\n\n      installingWorker.onstatechange = () => {\n        if (installingWorker.state === 'installed') {\n          if (navigator.serviceWorker.controller) {\n            /*\n             * At this point, the updated precached content has been fetched,\n             * but the previous service worker will still serve the older\n             * content until all client tabs are closed.\n             */\n            console.log('New content is available and will be used when all ' + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.'); // Execute callback\n\n            if (config && config.onUpdate) {\n              config.onUpdate(registration);\n            }\n          } else {\n            /*\n             * At this point, everything has been precached.\n             * It's the perfect time to display a\n             * \"Content is cached for offline use.\" message.\n             */\n            console.log('Content is cached for offline use.'); // Execute callback\n\n            if (config && config.onSuccess) {\n              config.onSuccess(registration);\n            }\n          }\n        }\n      };\n    };\n  }).catch(error => {\n    console.error('Error during service worker registration:', error);\n  });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: {\n      'Service-Worker': 'script'\n    }\n  }).then(response => {\n    // Ensure service worker exists, and that we really are getting a JS file.\n    const contentType = response.headers.get('content-type');\n\n    if (response.status === 404 || contentType != null && contentType.indexOf('javascript') === -1) {\n      // No service worker found. Probably a different app. Reload the page.\n      navigator.serviceWorker.ready.then(registration => {\n        registration.unregister().then(() => {\n          window.location.reload();\n        });\n      });\n    } else {\n      // Service worker found. Proceed as normal.\n      registerValidSW(swUrl, config);\n    }\n  }).catch(() => {\n    console.log('No internet connection found. App is running in offline mode.');\n  });\n}\n\nconst isLocalhost = Boolean(window.location.hostname === 'localhost' // [::1] is the IPv6 localhost address.\n|| window.location.hostname === '[::1]' // 127.0.0.0/8 are considered localhost for IPv4.\n|| window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n\n    if (publicUrl.origin !== window.location.origin) {\n      /*\n       * Our service worker won't work if PUBLIC_URL is on a different origin\n       * from what our page is served on. This might happen if a CDN is used to\n       * serve assets; see https://github.com/facebook/create-react-app/issues/2374\n       */\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n        /*\n         * Add some additional logging to localhost, pointing developers to the\n         * service worker/PWA documentation.\n         */\n\n        navigator.serviceWorker.ready.then(() => {\n          console.log('This web app is being served cache-first by a service ' + 'worker. To learn more, visit https://bit.ly/CRA-PWA');\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    }).catch(error => {\n      console.error(error.message);\n    });\n  }\n}","map":{"version":3,"sources":["/Users/wlp6897/newProjects/cordovaProjects/installment/front-end/src/serviceWorker.js"],"names":["registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","checkValidServiceWorker","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","window","location","reload","isLocalhost","Boolean","hostname","match","process","env","NODE_ENV","publicUrl","URL","PUBLIC_URL","href","origin","addEventListener","message"],"mappings":"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","sourcesContent":["/*\n * This optional code is used to register a service worker.\n * register() is not called by default.\n */\n\n/*\n * This lets the app load faster on subsequent visits in production, and gives\n * it offline capabilities. However, it also means that developers (and users)\n * will only see deployed updates on subsequent visits to a page, after all the\n * existing tabs open on the page have been closed, since previously cached\n * resources are updated in the background.\n */\n\n/*\n * To learn more about the benefits of this model and instructions on how to\n * opt-in, read https://bit.ly/CRA-PWA\n */\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              /*\n               * At this point, the updated precached content has been fetched,\n               * but the previous service worker will still serve the older\n               * content until all client tabs are closed.\n               */\n              console.log(\n                'New content is available and will be used when all '\n                  + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              /*\n               * At this point, everything has been precached.\n               * It's the perfect time to display a\n               * \"Content is cached for offline use.\" message.\n               */\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404\n        || (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === '[::1]'\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    || window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      /*\n       * Our service worker won't work if PUBLIC_URL is on a different origin\n       * from what our page is served on. This might happen if a CDN is used to\n       * serve assets; see https://github.com/facebook/create-react-app/issues/2374\n       */\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        /*\n         * Add some additional logging to localhost, pointing developers to the\n         * service worker/PWA documentation.\n         */\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service '\n              + 'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}