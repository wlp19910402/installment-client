{"ast":null,"code":"import \"antd-mobile/lib/toast/style\";\nimport _Toast from \"antd-mobile/lib/toast\";\nvar _jsxFileName = \"/Users/wlp6897/newProjects/cordovaProjects/installment/front-end/src/App.js\";\nimport React from 'react';\nimport { HashRouter as Router, Route } from 'react-router-dom';\nimport Routers from '@/plugins/libs/routerMap';\nimport { connect } from 'react-redux';\nimport { CLIENT_INTERFACE } from '@/plugins/libs/interfaceMap';\nimport { SET_USER_INFO, SET_REDIRECT } from '@/store/actions';\nimport axios from '@/plugins/requestServer/httpClient';\nimport { getStorage } from '@/plugins/common/storage';\nimport Main from '@/views/Main';\nimport Login from '@/views/Login';\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.fetchCheckLogin = async () => {\n      let hash = window.location.hash;\n      let path = hash.substring(1, hash.length); //用户是否已经登录过了\n\n      if (this.props.user.loginFlag) {\n        if (path === '/login') {\n          window.location.hash = '#/main/home';\n        }\n\n        return;\n      } //本地是否有存储用户信息\n\n\n      let storageUserInfo = getStorage('storageUserInfo'); //根据本地存储的用户信息，进行请求token是否有效登录，如果有效则更新token值\n\n      try {\n        let res = await axios.get(CLIENT_INTERFACE.CHECK_IS_LOGIN);\n\n        if (res.data.err !== '0') {\n          console.log(window.location);\n\n          if (path === '/login') {\n            return;\n          }\n\n          _Toast.info(res.data.msg, 1);\n\n          return;\n        }\n\n        let userData = { ...storageUserInfo,\n          ...res.data.result\n        };\n        this.props.setUserInfo(userData);\n\n        if (path === '/login') {\n          window.location.hash = '#/main/home';\n        }\n\n        console.log('已经登录了');\n      } catch (err) {\n        console.log(err); // Toast.info('请求异常', 1); //需删除\n      }\n    };\n  }\n\n  async componentDidMount() {\n    await this.fetchCheckLogin();\n  } //是否已经登录过及查证token是否是有效登录，并更新token\n\n\n  render() {\n    let loginFlag = this.props.user.loginFlag;\n    return /*#__PURE__*/React.createElement(Router, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 7\n      }\n    }, Routers.map((item, index) => {\n      if (item.path !== '/login') {\n        return /*#__PURE__*/React.createElement(Route, {\n          path: item.path,\n          key: index,\n          exact: true,\n          component: item.loginFlag && !loginFlag ? Login : item.component,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 19\n          }\n        }); // return (\n        //   <Route path={item.path} key={index} exact={item.exact} component={item.component}></Route>)\n      } else {\n        return /*#__PURE__*/React.createElement(Route, {\n          path: item.path,\n          key: index,\n          exact: true,\n          component: loginFlag ? Main : item.component,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 19\n          }\n        });\n      }\n    }));\n  }\n\n}\n\nexport default connect((state, props) => {\n  return state;\n}, {\n  setUserInfo(data) {\n    return {\n      type: SET_USER_INFO,\n      data\n    };\n  },\n\n  setRedirectPath(data) {\n    return {\n      type: SET_REDIRECT,\n      data\n    };\n  }\n\n})(App);","map":{"version":3,"sources":["/Users/wlp6897/newProjects/cordovaProjects/installment/front-end/src/App.js"],"names":["React","HashRouter","Router","Route","Routers","connect","CLIENT_INTERFACE","SET_USER_INFO","SET_REDIRECT","axios","getStorage","Main","Login","App","Component","fetchCheckLogin","hash","window","location","path","substring","length","props","user","loginFlag","storageUserInfo","res","get","CHECK_IS_LOGIN","data","err","console","log","info","msg","userData","result","setUserInfo","componentDidMount","render","map","item","index","component","state","type","setRedirectPath"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {HashRouter as Router,Route}from 'react-router-dom'\nimport Routers from '@/plugins/libs/routerMap'\nimport {connect} from 'react-redux'\nimport {CLIENT_INTERFACE}from '@/plugins/libs/interfaceMap'\nimport {SET_USER_INFO,SET_REDIRECT}from '@/store/actions'\nimport axios from '@/plugins/requestServer/httpClient'\nimport {getStorage}from '@/plugins/common/storage'\nimport { Toast} from 'antd-mobile';\nimport Main from '@/views/Main';\nimport Login from '@/views/Login'\nclass App extends React.Component{\n  async componentDidMount(){\n    await this.fetchCheckLogin()\n  }\n  //是否已经登录过及查证token是否是有效登录，并更新token\n  fetchCheckLogin=async()=>{\n    let hash =window.location.hash\n    let path = hash.substring(1,hash.length)\n    //用户是否已经登录过了\n    if(this.props.user.loginFlag){\n      if(path==='/login') {window.location.hash='#/main/home'}\n      return\n    }\n    //本地是否有存储用户信息\n    let storageUserInfo=getStorage('storageUserInfo')\n    //根据本地存储的用户信息，进行请求token是否有效登录，如果有效则更新token值\n    try{\n      let res = await axios.get(CLIENT_INTERFACE.CHECK_IS_LOGIN)\n      if(res.data.err!=='0'){\n        console.log(window.location)\n        if(path==='/login'){\n          return\n        }\n        Toast.info(res.data.msg, 1);\n        return\n      }\n      let userData = { ...storageUserInfo, ...res.data.result}\n      this.props.setUserInfo(userData)\n      if(path==='/login') {window.location.hash='#/main/home'}\n      console.log('已经登录了')\n    }catch(err){\n      console.log(err)\n      // Toast.info('请求异常', 1); //需删除\n    }\n  }\n  render(){\n    let loginFlag=this.props.user.loginFlag\n    return (\n\n      <Router>\n        {Routers.map((item,index)=>{\n          if(item.path!=='/login'){\n          return (<Route path={item.path} key={index} exact component={item.loginFlag&&!loginFlag?Login:item.component}></Route>)\n          // return (\n          //   <Route path={item.path} key={index} exact={item.exact} component={item.component}></Route>)\n        }else{\n          return (<Route path={item.path} key={index} exact component={loginFlag?Main:item.component}></Route>)\n        }\n        })}\n\n      </Router>\n    );\n  }\n}\n\nexport default connect((state,props)=>{\n\treturn state\n},{\n\tsetUserInfo(data){\n\t\treturn{\n\t\t\ttype:SET_USER_INFO,\n\t\t\tdata\n\t\t}\n  },\n  setRedirectPath(data){\n    return{\n      type:SET_REDIRECT,\n      data\n    }\n  }\n})(App)\n"]},"metadata":{},"sourceType":"module"}