{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _defineProperty2 = require('babel-runtime/helpers/defineProperty');\n\nvar _defineProperty3 = _interopRequireDefault(_defineProperty2);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _classnames3 = require('classnames');\n\nvar _classnames4 = _interopRequireDefault(_classnames3);\n\nvar _react = require('react');\n\nvar React = _interopRequireWildcard(_react);\n\nvar _rmcFeedback = require('rmc-feedback');\n\nvar _rmcFeedback2 = _interopRequireDefault(_rmcFeedback);\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n\n    newObj['default'] = obj;\n    return newObj;\n  }\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    'default': obj\n  };\n}\n\nvar SegmentedControl = function (_React$Component) {\n  (0, _inherits3['default'])(SegmentedControl, _React$Component);\n\n  function SegmentedControl(props) {\n    (0, _classCallCheck3['default'])(this, SegmentedControl);\n\n    var _this = (0, _possibleConstructorReturn3['default'])(this, (SegmentedControl.__proto__ || Object.getPrototypeOf(SegmentedControl)).call(this, props));\n\n    _this.state = {\n      selectedIndex: props.selectedIndex\n    };\n    return _this;\n  }\n\n  (0, _createClass3['default'])(SegmentedControl, [{\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(nextProps) {\n      if (nextProps.selectedIndex !== this.state.selectedIndex) {\n        this.setState({\n          selectedIndex: nextProps.selectedIndex\n        });\n      }\n    }\n  }, {\n    key: 'onClick',\n    value: function onClick(e, index, value) {\n      var _props = this.props,\n          disabled = _props.disabled,\n          onChange = _props.onChange,\n          onValueChange = _props.onValueChange;\n\n      if (!disabled && this.state.selectedIndex !== index) {\n        // just do a mock so that the api to be the same as react-native\n        e.nativeEvent = e.nativeEvent ? e.nativeEvent : {};\n        e.nativeEvent.selectedSegmentIndex = index;\n        e.nativeEvent.value = value;\n\n        if (onChange) {\n          onChange(e);\n        }\n\n        if (onValueChange) {\n          onValueChange(value);\n        }\n\n        this.setState({\n          selectedIndex: index\n        });\n      }\n    }\n  }, {\n    key: 'renderSegmentItem',\n    value: function renderSegmentItem(idx, value, selected) {\n      var _this2 = this;\n\n      var _props2 = this.props,\n          prefixCls = _props2.prefixCls,\n          disabled = _props2.disabled,\n          tintColor = _props2.tintColor;\n      var itemCls = (0, _classnames4['default'])(prefixCls + '-item', (0, _defineProperty3['default'])({}, prefixCls + '-item-selected', selected));\n      var itemStyle = {\n        color: selected ? '#fff' : tintColor,\n        backgroundColor: selected ? tintColor : 'transparent',\n        borderColor: tintColor\n      };\n      var activeInnerStyle = tintColor ? {\n        backgroundColor: tintColor\n      } : {};\n      return React.createElement(_rmcFeedback2['default'], {\n        key: idx,\n        disabled: disabled,\n        activeClassName: prefixCls + '-item-active'\n      }, React.createElement('div', {\n        className: itemCls,\n        style: itemStyle,\n        role: 'tab',\n        'aria-selected': selected && !disabled,\n        'aria-disabled': disabled,\n        onClick: disabled ? undefined : function (e) {\n          return _this2.onClick(e, idx, value);\n        }\n      }, React.createElement('div', {\n        className: prefixCls + '-item-inner',\n        style: activeInnerStyle\n      }), value));\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this3 = this;\n\n      var _props3 = this.props,\n          className = _props3.className,\n          prefixCls = _props3.prefixCls,\n          style = _props3.style,\n          disabled = _props3.disabled,\n          _props3$values = _props3.values,\n          values = _props3$values === undefined ? [] : _props3$values;\n      var wrapCls = (0, _classnames4['default'])(className, prefixCls, (0, _defineProperty3['default'])({}, prefixCls + '-disabled', disabled));\n      return React.createElement('div', {\n        className: wrapCls,\n        style: style,\n        role: 'tablist'\n      }, values.map(function (value, idx) {\n        return (// tslint:disable-next-line:jsx-no-multiline-js\n          _this3.renderSegmentItem(idx, value, idx === _this3.state.selectedIndex)\n        );\n      }));\n    }\n  }]);\n  return SegmentedControl;\n}(React.Component);\n\nexports['default'] = SegmentedControl;\nSegmentedControl.defaultProps = {\n  prefixCls: 'am-segment',\n  selectedIndex: 0,\n  disabled: false,\n  values: [],\n  onChange: function onChange() {},\n  onValueChange: function onValueChange() {},\n  style: {},\n  tintColor: ''\n};\nmodule.exports = exports['default'];","map":null,"metadata":{},"sourceType":"script"}