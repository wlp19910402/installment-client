{"ast":null,"code":"import \"antd-mobile/lib/toast/style\";\nimport _Toast from \"antd-mobile/lib/toast\";\nvar _jsxFileName = \"/Users/wlp6897/newProjects/cordovaProjects/installment/front-end/src/App.js\";\nimport React from 'react';\nimport { HashRouter as Router, Route, useHistory } from 'react-router-dom';\nimport Routers from '@/plugins/libs/routerMap';\nimport { connect } from 'react-redux';\nimport { CLIENT_INTERFACE } from '@/plugins/libs/interfaceMap';\nimport { SET_USER_INFO, SET_REDIRECT } from '@/store/actions';\nimport axios from 'axios';\nimport { getStorage } from '@/plugins/common/storage';\nimport Main from '@/views/Main'; // import Login from '@/views/Login'\n\nexport const HomeButton = () => {\n  let history = useHistory();\n\n  function handleClick() {\n    history.push(\"/\");\n  }\n\n  return /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 5\n    }\n  }, \"Go home\");\n};\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.fetchCheckLogin = async () => {\n      //用户是否已经登录过了\n      if (this.props.user.isAuth) {\n        if (window.location.pathname === '/login') {\n          window.location.pathname = '/main/home';\n        }\n\n        return;\n      } //本地是否有存储用户信息\n\n\n      let storageUserInfo = getStorage('storageUserInfo');\n\n      if (!storageUserInfo) {\n        // this.goLogin()\n        return;\n      } //本地存储的用户信息不能为空\n\n\n      if (!storageUserInfo.accountId || !storageUserInfo.accountType || !storageUserInfo.token) {\n        // this.goLogin()\n        return;\n      } //根据本地存储的用户信息，进行请求token是否有效登录，如果有效则更新token值\n\n\n      try {\n        let res = await axios({\n          url: CLIENT_INTERFACE.CHECK_IS_LOGIN,\n          method: 'post',\n          headers: {\n            'Content-Type': 'application/json; charset=UTF-8'\n          },\n          data: { ...storageUserInfo\n          }\n        });\n\n        if (res.data.err !== '0') {\n          _Toast.info(res.data.msg, 1);\n\n          return;\n        }\n\n        let userData = { ...storageUserInfo,\n          token: res.data.result.token\n        };\n        this.props.setUserInfo(userData);\n\n        if (window.location.pathname === '/login') {\n          window.location.pathname = '/main/home';\n        }\n\n        console.log('已经登录了');\n      } catch (err) {\n        console.log(err);\n\n        _Toast.info('请求异常', 1); //需删除\n\n      }\n    };\n  }\n\n  async componentDidMount() {\n    await this.fetchCheckLogin();\n  } //是否已经登录过及查证token是否是有效登录，并更新token\n\n\n  render() {\n    let isAuth = this.props.user.isAuth;\n    return /*#__PURE__*/React.createElement(Router, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 7\n      }\n    }, HomeButton(), Routers.map((item, index) => {\n      if (item.path !== '/login') {\n        // return (<Route path={item.path} key={index} exact component={item.isAuth&&!isAuth?Login:item.component}></Route>)\n        return /*#__PURE__*/React.createElement(\"div\", {\n          key: index,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 19\n          }\n        }, /*#__PURE__*/React.createElement(Route, {\n          path: item.path,\n          key: index,\n          exact: item.exact,\n          component: item.component,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 13\n          }\n        }));\n      } else {\n        return /*#__PURE__*/React.createElement(Route, {\n          path: item.path,\n          key: index,\n          exact: true,\n          component: isAuth ? Main : item.component,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 19\n          }\n        });\n      }\n    }));\n  }\n\n}\n\nexport default connect((state, props) => {\n  return state;\n}, {\n  setUserInfo(data) {\n    return {\n      type: SET_USER_INFO,\n      data\n    };\n  },\n\n  setRedirectPath(data) {\n    return {\n      type: SET_REDIRECT,\n      data\n    };\n  }\n\n})(App);","map":{"version":3,"sources":["/Users/wlp6897/newProjects/cordovaProjects/installment/front-end/src/App.js"],"names":["React","HashRouter","Router","Route","useHistory","Routers","connect","CLIENT_INTERFACE","SET_USER_INFO","SET_REDIRECT","axios","getStorage","Main","HomeButton","history","handleClick","push","App","Component","fetchCheckLogin","props","user","isAuth","window","location","pathname","storageUserInfo","accountId","accountType","token","res","url","CHECK_IS_LOGIN","method","headers","data","err","info","msg","userData","result","setUserInfo","console","log","componentDidMount","render","map","item","index","path","exact","component","state","type","setRedirectPath"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {HashRouter as Router,Route,useHistory}from 'react-router-dom'\nimport Routers from '@/plugins/libs/routerMap'\nimport {connect} from 'react-redux'\nimport {CLIENT_INTERFACE}from '@/plugins/libs/interfaceMap'\nimport {SET_USER_INFO,SET_REDIRECT}from '@/store/actions'\nimport axios from 'axios'\nimport {getStorage}from '@/plugins/common/storage'\nimport { Toast} from 'antd-mobile';\nimport Main from '@/views/Main';\n// import Login from '@/views/Login'\nexport const HomeButton=()=> {\n  let history = useHistory();\n  function handleClick() {\n    history.push(\"/\");\n  }\n  return (\n    <button type=\"button\" >\n      Go home\n    </button>\n  );\n}\n\n\nclass App extends React.Component{\n  async componentDidMount(){\n    await this.fetchCheckLogin()\n  }\n  //是否已经登录过及查证token是否是有效登录，并更新token\n  fetchCheckLogin=async()=>{\n    //用户是否已经登录过了\n    if(this.props.user.isAuth){\n      if(window.location.pathname==='/login') {window.location.pathname='/main/home'}\n      return\n    }\n    //本地是否有存储用户信息\n    let storageUserInfo=getStorage('storageUserInfo')\n    if(!storageUserInfo){\n      // this.goLogin()\n      return\n    }\n    //本地存储的用户信息不能为空\n    if(!storageUserInfo.accountId||!storageUserInfo.accountType||!storageUserInfo.token){\n      // this.goLogin()\n      return\n    }\n    //根据本地存储的用户信息，进行请求token是否有效登录，如果有效则更新token值\n    try{\n      let res = await axios({\n        url: CLIENT_INTERFACE.CHECK_IS_LOGIN,\n        method: 'post',\n        headers: { 'Content-Type': 'application/json; charset=UTF-8' },\n        data:{ ...storageUserInfo}\n      })\n      if(res.data.err!=='0'){\n        Toast.info(res.data.msg, 1);\n        return\n      }\n      let userData = { ...storageUserInfo, token:res.data.result.token}\n      this.props.setUserInfo(userData)\n      if(window.location.pathname==='/login') {window.location.pathname='/main/home'}\n      console.log('已经登录了')\n      }catch(err){\n        console.log(err)\n        Toast.info('请求异常', 1); //需删除\n      }\n  }\n  render(){\n    let isAuth=this.props.user.isAuth\n    return (\n\n      <Router>\n        {HomeButton()}\n        {Routers.map((item,index)=>{\n          if(item.path!=='/login'){\n          // return (<Route path={item.path} key={index} exact component={item.isAuth&&!isAuth?Login:item.component}></Route>)\n          return (<div key={index}>\n            <Route path={item.path} key={index} exact={item.exact} component={item.component}></Route></div>)\n        }else{\n          return (<Route path={item.path} key={index} exact component={isAuth?Main:item.component}></Route>)\n        }\n        })}\n\n      </Router>\n    );\n  }\n}\n\nexport default connect((state,props)=>{\n\treturn state\n},{\n\tsetUserInfo(data){\n\t\treturn{\n\t\t\ttype:SET_USER_INFO,\n\t\t\tdata\n\t\t}\n  },\n  setRedirectPath(data){\n    return{\n      type:SET_REDIRECT,\n      data\n    }\n  }\n})(App)\n"]},"metadata":{},"sourceType":"module"}