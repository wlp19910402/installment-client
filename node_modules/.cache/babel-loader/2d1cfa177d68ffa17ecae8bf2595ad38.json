{"ast":null,"code":"import Axios from 'axios';\nimport qs from 'qs';\nimport { getStorage } from '@/plugins/common/storage';\nlet storageUserInfo = getStorage('storageUserInfo');\n\nif (!storageUserInfo) {\n  storageUserInfo = {\n    accountId: null,\n    accountType: null,\n    token: null\n  };\n} //本地存储的用户信息不能为空\n\n\nif (!storageUserInfo.accountId || !storageUserInfo.accountType || !storageUserInfo.token) {\n  storageUserInfo = {\n    accountId: null,\n    accountType: null,\n    token: null\n  };\n}\n\nlet {\n  accountId,\n  accountType,\n  token\n} = storageUserInfo;\nconst axios = Axios.create();\naxios.defaults.headers.post['Content-Type'] = \"application/json;charset=UTF-8\";\naxios.defaults.headers.post['accountId'] = accountId;\naxios.defaults.headers.post[\"accountType\"] = accountType;\naxios.defaults.headers.post[\"token\"] = token;\naxios.interceptors.request.use(config => {\n  // if (config.method === 'post') {\n  //   // console.log(config.data)\n  //   // config.data = qs.stringify(config.data);\n  // }\n  return config;\n});\naxios.interceptors.response.use(response => {\n  console.log(\"response:\");\n  console.log(response);\n  let data = response.data;\n  response.data = data.data;\n  return response;\n}, error => {\n  console.log(error);\n  return Promise.reject(error);\n});\nexport default axios;","map":{"version":3,"sources":["/Users/wlp6897/newProjects/cordovaProjects/installment/front-end/src/plugins/requestServer/httpClient.js"],"names":["Axios","qs","getStorage","storageUserInfo","accountId","accountType","token","axios","create","defaults","headers","post","interceptors","request","use","config","response","console","log","data","error","Promise","reject"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,EAAP,MAAe,IAAf;AACA,SAAQC,UAAR,QAAwB,0BAAxB;AAEA,IAAIC,eAAe,GAACD,UAAU,CAAC,iBAAD,CAA9B;;AAEA,IAAG,CAACC,eAAJ,EAAoB;AAClBA,EAAAA,eAAe,GAAC;AAACC,IAAAA,SAAS,EAAC,IAAX;AAAgBC,IAAAA,WAAW,EAAC,IAA5B;AAAiCC,IAAAA,KAAK,EAAC;AAAvC,GAAhB;AACD,C,CAEA;;;AACA,IAAG,CAACH,eAAe,CAACC,SAAjB,IAA4B,CAACD,eAAe,CAACE,WAA7C,IAA0D,CAACF,eAAe,CAACG,KAA9E,EAAoF;AACnFH,EAAAA,eAAe,GAAC;AAACC,IAAAA,SAAS,EAAC,IAAX;AAAgBC,IAAAA,WAAW,EAAC,IAA5B;AAAiCC,IAAAA,KAAK,EAAC;AAAvC,GAAhB;AACD;;AACD,IAAI;AAACF,EAAAA,SAAD;AAAWC,EAAAA,WAAX;AAAuBC,EAAAA;AAAvB,IAAgCH,eAApC;AAEA,MAAMI,KAAK,GAAGP,KAAK,CAACQ,MAAN,EAAd;AACAD,KAAK,CAACE,QAAN,CAAeC,OAAf,CAAuBC,IAAvB,CAA4B,cAA5B,IAA4C,gCAA5C;AACAJ,KAAK,CAACE,QAAN,CAAeC,OAAf,CAAuBC,IAAvB,CAA4B,WAA5B,IAAyCP,SAAzC;AACAG,KAAK,CAACE,QAAN,CAAeC,OAAf,CAAuBC,IAAvB,CAA4B,aAA5B,IAA2CN,WAA3C;AACAE,KAAK,CAACE,QAAN,CAAeC,OAAf,CAAuBC,IAAvB,CAA4B,OAA5B,IAAqCL,KAArC;AAEAC,KAAK,CAACK,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CAAgCC,MAAD,IAAU;AACvC;AACA;AACA;AACA;AACA,SAAOA,MAAP;AACD,CAND;AAQAR,KAAK,CAACK,YAAN,CAAmBI,QAAnB,CAA4BF,GAA5B,CACGE,QAAD,IAAc;AACZC,EAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AACE,MAAIG,IAAI,GAAGH,QAAQ,CAACG,IAApB;AACAH,EAAAA,QAAQ,CAACG,IAAT,GAAgBA,IAAI,CAACA,IAArB;AACA,SAAOH,QAAP;AACH,CAPH,EAQGI,KAAD,IAAW;AACTH,EAAAA,OAAO,CAACC,GAAR,CAAYE,KAAZ;AACE,SAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACH,CAXH;AAcA,eAAeb,KAAf","sourcesContent":["import Axios from 'axios'\nimport qs from 'qs'\nimport {getStorage}from '@/plugins/common/storage'\n\nlet storageUserInfo=getStorage('storageUserInfo')\n\nif(!storageUserInfo){\n  storageUserInfo={accountId:null,accountType:null,token:null}\n}\n\n //本地存储的用户信息不能为空\n if(!storageUserInfo.accountId||!storageUserInfo.accountType||!storageUserInfo.token){\n  storageUserInfo={accountId:null,accountType:null,token:null}\n}\nlet {accountId,accountType,token} = storageUserInfo\n\nconst axios = Axios.create();\naxios.defaults.headers.post['Content-Type']=\"application/json;charset=UTF-8\"\naxios.defaults.headers.post['accountId']=accountId\naxios.defaults.headers.post[\"accountType\"]=accountType\naxios.defaults.headers.post[\"token\"]=token\n\naxios.interceptors.request.use((config)=>{\n  // if (config.method === 'post') {\n  //   // console.log(config.data)\n  //   // config.data = qs.stringify(config.data);\n  // }\n  return config;\n})\n\naxios.interceptors.response.use(\n  (response) => {\n    console.log(\"response:\")\n    console.log(response)\n      let data = response.data;\n      response.data = data.data;\n      return response;\n  },\n  (error) => {\n    console.log(error)\n      return Promise.reject(error);\n  }\n);\n\nexport default axios;"]},"metadata":{},"sourceType":"module"}