{"ast":null,"code":"/**\n * 将数据提交localStore本地数据\n * @param {提交本地数据的名字} name\n * @param {提交本地数据的数据} data\n */\nexport const setStorage = (name, data) => {\n  localStorage[name] = JSON.stringify(data);\n};\n/**\n * 获取localStore本地数据\n * @param {获取本地数据的名字} name\n */\n\nexport const getStorage = name => JSON.parse(localStorage.getItem(name));\n/**\n * 移除localStore本地数据\n * @param {移除的本地数据的名字} name\n */\n\nexport const removeStorage = name => {\n  localStorage.removeItem(name);\n};\n/**\n * 发生修改时提交下更新时间。\n */\n\nexport const setLocalUpdateTime = () => {\n  const tmpTimeStamp = Date.parse(new Date());\n  localStorage.updateTime = tmpTimeStamp;\n};\n/**\n * 登录成功或者刷新token获取到token的浏览器时间\n */\n\nexport const setTokenAuthTime = async () => {\n  const tmpTimeStamp = Date.parse(new Date());\n  localStorage.tokenTime = tmpTimeStamp;\n};\n/**\n * 将map数据存储在本地，需要先转成数组格式。\n * @param {存储在local本地的名字} name\n * @param {Map对象结构数据} mapObj\n * @param {几层Map对象} level\n */\n\nexport const mapObjectConvertToArray = (name, mapObj, level = 1) => {\n  const tmpLocal = [...mapObj];\n\n  if (level === 2) {\n    // 层级为2的Map对象\n    tmpLocal.forEach(item => {\n      item[1] = [...item[1]];\n    });\n  }\n\n  setStorage(name, tmpLocal);\n};\n/**\n * 获取本地的数据，并将数据由数组格式转换成map对象格式的数据。\n * @param {存储在local本地的名字} name\n * @param {存储在本地的数组} arr\n * @param {需要转成几层Map对象结构的} level\n */\n\nexport const localArrayConvertToMapObjectInit = (name, level = 1) => {\n  if (getStorage(name) !== undefined && getStorage(name) !== null) {\n    const tmp = getStorage(name);\n\n    if (level === 2) {\n      // 层级为2的Map对象\n      tmp.forEach(item => {\n        item[1] = new Map(item[1]);\n      });\n    }\n\n    return new Map(tmp);\n  }\n\n  return new Map();\n};","map":{"version":3,"sources":["/Users/wlp6897/newProjects/cordovaProjects/installment/front-end/src/plugins/common/storage.js"],"names":["setStorage","name","data","localStorage","JSON","stringify","getStorage","parse","getItem","removeStorage","removeItem","setLocalUpdateTime","tmpTimeStamp","Date","updateTime","setTokenAuthTime","tokenTime","mapObjectConvertToArray","mapObj","level","tmpLocal","forEach","item","localArrayConvertToMapObjectInit","undefined","tmp","Map"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMA,UAAU,GAAG,CAACC,IAAD,EAAOC,IAAP,KAAgB;AACxCC,EAAAA,YAAY,CAACF,IAAD,CAAZ,GAAqBG,IAAI,CAACC,SAAL,CAAeH,IAAf,CAArB;AACD,CAFM;AAGP;AACA;AACA;AACA;;AACA,OAAO,MAAMI,UAAU,GAAIL,IAAD,IAAUG,IAAI,CAACG,KAAL,CAAWJ,YAAY,CAACK,OAAb,CAAqBP,IAArB,CAAX,CAA7B;AACP;AACA;AACA;AACA;;AACA,OAAO,MAAMQ,aAAa,GAAIR,IAAD,IAAU;AACrCE,EAAAA,YAAY,CAACO,UAAb,CAAwBT,IAAxB;AACD,CAFM;AAGP;AACA;AACA;;AACA,OAAO,MAAMU,kBAAkB,GAAG,MAAM;AACtC,QAAMC,YAAY,GAAGC,IAAI,CAACN,KAAL,CAAW,IAAIM,IAAJ,EAAX,CAArB;AACAV,EAAAA,YAAY,CAACW,UAAb,GAA0BF,YAA1B;AACD,CAHM;AAIP;AACA;AACA;;AACA,OAAO,MAAMG,gBAAgB,GAAG,YAAY;AAC1C,QAAMH,YAAY,GAAGC,IAAI,CAACN,KAAL,CAAW,IAAIM,IAAJ,EAAX,CAArB;AACAV,EAAAA,YAAY,CAACa,SAAb,GAAyBJ,YAAzB;AACD,CAHM;AAIP;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMK,uBAAuB,GAAG,CAAChB,IAAD,EAAOiB,MAAP,EAAeC,KAAK,GAAG,CAAvB,KAA6B;AAClE,QAAMC,QAAQ,GAAG,CAAC,GAAGF,MAAJ,CAAjB;;AACA,MAAIC,KAAK,KAAK,CAAd,EAAiB;AACf;AACAC,IAAAA,QAAQ,CAACC,OAAT,CAAkBC,IAAD,IAAU;AACzBA,MAAAA,IAAI,CAAC,CAAD,CAAJ,GAAU,CAAC,GAAGA,IAAI,CAAC,CAAD,CAAR,CAAV;AACD,KAFD;AAGD;;AACDtB,EAAAA,UAAU,CAACC,IAAD,EAAOmB,QAAP,CAAV;AACD,CATM;AAUP;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMG,gCAAgC,GAAG,CAACtB,IAAD,EAAOkB,KAAK,GAAG,CAAf,KAAqB;AACnE,MAAIb,UAAU,CAACL,IAAD,CAAV,KAAqBuB,SAArB,IAAkClB,UAAU,CAACL,IAAD,CAAV,KAAqB,IAA3D,EAAiE;AAC/D,UAAMwB,GAAG,GAAGnB,UAAU,CAACL,IAAD,CAAtB;;AACA,QAAIkB,KAAK,KAAK,CAAd,EAAiB;AACf;AACAM,MAAAA,GAAG,CAACJ,OAAJ,CAAaC,IAAD,IAAU;AACpBA,QAAAA,IAAI,CAAC,CAAD,CAAJ,GAAU,IAAII,GAAJ,CAAQJ,IAAI,CAAC,CAAD,CAAZ,CAAV;AACD,OAFD;AAGD;;AACD,WAAO,IAAII,GAAJ,CAAQD,GAAR,CAAP;AACD;;AACD,SAAO,IAAIC,GAAJ,EAAP;AACD,CAZM","sourcesContent":["/**\n * 将数据提交localStore本地数据\n * @param {提交本地数据的名字} name\n * @param {提交本地数据的数据} data\n */\nexport const setStorage = (name, data) => {\n  localStorage[name] = JSON.stringify(data);\n};\n/**\n * 获取localStore本地数据\n * @param {获取本地数据的名字} name\n */\nexport const getStorage = (name) => JSON.parse(localStorage.getItem(name));\n/**\n * 移除localStore本地数据\n * @param {移除的本地数据的名字} name\n */\nexport const removeStorage = (name) => {\n  localStorage.removeItem(name);\n};\n/**\n * 发生修改时提交下更新时间。\n */\nexport const setLocalUpdateTime = () => {\n  const tmpTimeStamp = Date.parse(new Date());\n  localStorage.updateTime = tmpTimeStamp;\n};\n/**\n * 登录成功或者刷新token获取到token的浏览器时间\n */\nexport const setTokenAuthTime = async () => {\n  const tmpTimeStamp = Date.parse(new Date());\n  localStorage.tokenTime = tmpTimeStamp;\n};\n/**\n * 将map数据存储在本地，需要先转成数组格式。\n * @param {存储在local本地的名字} name\n * @param {Map对象结构数据} mapObj\n * @param {几层Map对象} level\n */\nexport const mapObjectConvertToArray = (name, mapObj, level = 1) => {\n  const tmpLocal = [...mapObj];\n  if (level === 2) {\n    // 层级为2的Map对象\n    tmpLocal.forEach((item) => {\n      item[1] = [...item[1]];\n    });\n  }\n  setStorage(name, tmpLocal);\n};\n/**\n * 获取本地的数据，并将数据由数组格式转换成map对象格式的数据。\n * @param {存储在local本地的名字} name\n * @param {存储在本地的数组} arr\n * @param {需要转成几层Map对象结构的} level\n */\nexport const localArrayConvertToMapObjectInit = (name, level = 1) => {\n  if (getStorage(name) !== undefined && getStorage(name) !== null) {\n    const tmp = getStorage(name);\n    if (level === 2) {\n      // 层级为2的Map对象\n      tmp.forEach((item) => {\n        item[1] = new Map(item[1]);\n      });\n    }\n    return new Map(tmp);\n  }\n  return new Map();\n};\n"]},"metadata":{},"sourceType":"module"}