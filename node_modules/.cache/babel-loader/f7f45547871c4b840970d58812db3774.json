{"ast":null,"code":"import \"antd-mobile/lib/toast/style\";\nimport _Toast from \"antd-mobile/lib/toast\";\nvar _jsxFileName = \"/Users/wlp6897/newProjects/cordovaProjects/installment/front-end/src/App.js\";\nimport React from 'react';\nimport { HashRouter as Router, Route } from 'react-router-dom';\nimport Routers from '@/plugins/libs/routerMap';\nimport { connect } from 'react-redux';\nimport { CLIENT_INTERFACE } from '@/plugins/libs/interfaceMap';\nimport { SET_USER_INFO, SET_REDIRECT } from '@/store/actions';\nimport axios from '@/plugins/requestServer/httpClient';\nimport { getStorage } from '@/plugins/common/storage';\nimport Main from '@/views/Main';\nimport Login from '@/views/Login';\nimport { Base64 } from 'js-base64';\nimport PropTypes from 'prop-types';\n\nclass App extends React.Component {\n  async componentDidMount() {\n    await this.fetchCheckLogin();\n    await this.watchToken();\n  } // 是否已经登录过及查证token是否是有效登录，并更新token\n\n\n  async fetchCheckLogin() {\n    const {\n      hash\n    } = window.location;\n    const path = hash.substring(1, hash.length); // 用户是否已经登录过了\n\n    if (this.props.user.loginFlag) {\n      if (path === '/login') {\n        window.location.hash = '#/main/home';\n      }\n\n      return;\n    } // 本地是否有存储用户信息\n\n\n    const storageUserInfo = getStorage('storageUserInfo'); // 根据本地存储的用户信息，进行请求token是否有效登录，如果有效则更新token值\n\n    try {\n      const res = await axios.get(CLIENT_INTERFACE.CHECK_IS_LOGIN);\n\n      if (res.data.err !== '0') {\n        if (path === '/login') {\n          return;\n        }\n\n        _Toast.info(res.data.msg, 1);\n\n        return;\n      }\n\n      const userData = { ...storageUserInfo,\n        ...res.data.result\n      };\n      this.props.setUserInfo(userData);\n\n      if (path === '/login') {\n        window.location.hash = '#/main/home';\n      }\n\n      console.log('已经登录了');\n    } catch (err) {\n      console.log(err);\n    }\n  } // 检测token值的有效，如果在loginFlag=true登录状态的话，则没隔30秒进行检查token有效时间比当前时间是不是小于3分钟，如果小于三分钟则请求刷新token\n\n\n  async watchToken() {\n    if (this.props.user.loginFlag) {\n      window.clearTimeout(this.watchRefreshTime);\n      const that = this;\n      const {\n        token\n      } = getStorage('storageUserInfo');\n\n      if (token !== '') {\n        const jwtTokenArr = token.split('.');\n        const tokenExpiration = JSON.parse(Base64.decode(jwtTokenArr[1])).exp; // 截取token中的preload中的exp的有效期时间。\n\n        const minTime = Math.floor(Date.now() / 1000 + 3 * 60); // 获取当前时间并加上最小的有效期时间\n\n        if (tokenExpiration > minTime) {\n          // 如果大于，则监听30秒之后再检测一次\n          this.watchRefreshTime = setTimeout(async () => {\n            await that.watchToken();\n          }, 1000 * 31);\n          return;\n        } // 去请求刷新token\n\n\n        const res = await axios.get(CLIENT_INTERFACE.REFRESH_TOKEN); // 刷新token值\n\n        if (res.data.err === '0') {\n          console.log('刷新了token', res);\n          this.props.setUserInfo({\n            token: res.data.result.token\n          });\n          this.watchRefreshTime = setTimeout(async () => {\n            await that.watchToken();\n          }, 1000 * 3);\n        }\n      }\n    }\n  }\n\n  render() {\n    const {\n      loginFlag\n    } = this.props.user;\n    return /*#__PURE__*/React.createElement(Router, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 7\n      }\n    }, Routers.map((item, index) => {\n      if (item.path !== '/login') {\n        return /*#__PURE__*/React.createElement(Route, {\n          path: item.path,\n          key: index,\n          exact: true,\n          component: item.loginFlag && !loginFlag ? Login : item.component,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 21\n          }\n        });\n      }\n\n      return /*#__PURE__*/React.createElement(Route, {\n        path: item.path,\n        key: index,\n        exact: true,\n        component: loginFlag ? Main : item.component,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 19\n        }\n      });\n    }));\n  }\n\n}\n\nApp.propTypes = {\n  user: PropTypes.object,\n  setUserInfo: PropTypes.func,\n  setRedirectPath: PropTypes.func\n};\nexport default connect((state, props) => ({ ...props,\n  ...state\n}), {\n  setUserInfo(data) {\n    return {\n      type: SET_USER_INFO,\n      data\n    };\n  },\n\n  setRedirectPath(data) {\n    return {\n      type: SET_REDIRECT,\n      data\n    };\n  }\n\n})(App);","map":{"version":3,"sources":["/Users/wlp6897/newProjects/cordovaProjects/installment/front-end/src/App.js"],"names":["React","HashRouter","Router","Route","Routers","connect","CLIENT_INTERFACE","SET_USER_INFO","SET_REDIRECT","axios","getStorage","Main","Login","Base64","PropTypes","App","Component","componentDidMount","fetchCheckLogin","watchToken","hash","window","location","path","substring","length","props","user","loginFlag","storageUserInfo","res","get","CHECK_IS_LOGIN","data","err","info","msg","userData","result","setUserInfo","console","log","clearTimeout","watchRefreshTime","that","token","jwtTokenArr","split","tokenExpiration","JSON","parse","decode","exp","minTime","Math","floor","Date","now","setTimeout","REFRESH_TOKEN","render","map","item","index","component","propTypes","object","func","setRedirectPath","state","type"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { HashRouter as Router, Route } from 'react-router-dom';\nimport Routers from '@/plugins/libs/routerMap';\nimport { connect } from 'react-redux';\nimport { CLIENT_INTERFACE } from '@/plugins/libs/interfaceMap';\nimport { SET_USER_INFO, SET_REDIRECT } from '@/store/actions';\nimport axios from '@/plugins/requestServer/httpClient';\nimport { getStorage } from '@/plugins/common/storage';\nimport { Toast } from 'antd-mobile';\nimport Main from '@/views/Main';\nimport Login from '@/views/Login';\nimport { Base64 } from 'js-base64';\nimport PropTypes from 'prop-types';\n\nclass App extends React.Component {\n  async componentDidMount() {\n    await this.fetchCheckLogin();\n    await this.watchToken();\n  }\n\n  // 是否已经登录过及查证token是否是有效登录，并更新token\n  async fetchCheckLogin() {\n    const { hash } = window.location;\n    const path = hash.substring(1, hash.length);\n    // 用户是否已经登录过了\n    if (this.props.user.loginFlag) {\n      if (path === '/login') { window.location.hash = '#/main/home'; }\n      return;\n    }\n    // 本地是否有存储用户信息\n    const storageUserInfo = getStorage('storageUserInfo');\n    // 根据本地存储的用户信息，进行请求token是否有效登录，如果有效则更新token值\n    try {\n      const res = await axios.get(CLIENT_INTERFACE.CHECK_IS_LOGIN);\n      if (res.data.err !== '0') {\n        if (path === '/login') { return; }\n        Toast.info(res.data.msg, 1);\n        return;\n      }\n      const userData = { ...storageUserInfo, ...res.data.result };\n      this.props.setUserInfo(userData);\n      if (path === '/login') { window.location.hash = '#/main/home'; }\n      console.log('已经登录了');\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  // 检测token值的有效，如果在loginFlag=true登录状态的话，则没隔30秒进行检查token有效时间比当前时间是不是小于3分钟，如果小于三分钟则请求刷新token\n  async watchToken() {\n    if (this.props.user.loginFlag) {\n      window.clearTimeout(this.watchRefreshTime);\n      const that = this;\n      const { token } = getStorage('storageUserInfo');\n      if (token !== '') {\n        const jwtTokenArr = token.split('.');\n        const tokenExpiration = JSON.parse(Base64.decode(jwtTokenArr[1])).exp; // 截取token中的preload中的exp的有效期时间。\n        const minTime = Math.floor(Date.now() / 1000 + 3 * 60); // 获取当前时间并加上最小的有效期时间\n        if (tokenExpiration > minTime) { // 如果大于，则监听30秒之后再检测一次\n          this.watchRefreshTime = setTimeout(async () => {\n            await that.watchToken();\n          }, 1000 * 31);\n          return;\n        }\n        // 去请求刷新token\n        const res = await axios.get(CLIENT_INTERFACE.REFRESH_TOKEN); // 刷新token值\n        if (res.data.err === '0') {\n          console.log('刷新了token', res);\n          this.props.setUserInfo({ token: res.data.result.token });\n          this.watchRefreshTime = setTimeout(async () => {\n            await that.watchToken();\n          }, 1000 * 3);\n        }\n      }\n    }\n  }\n\n  render() {\n    const { loginFlag } = this.props.user;\n    return (\n      <Router>\n        {Routers.map((item, index) => {\n          if (item.path !== '/login') {\n            return (<Route path={item.path} key={index} exact component={item.loginFlag && !loginFlag ? Login : item.component} />);\n          }\n          return (<Route path={item.path} key={index} exact component={loginFlag ? Main : item.component} />);\n        })}\n      </Router>\n    );\n  }\n}\nApp.propTypes = {\nuser: PropTypes.object,\nsetUserInfo: PropTypes.func,\nsetRedirectPath: PropTypes.func,\n}\nexport default connect((state, props) => ({\n  ...props,\n  ...state\n}), {\n  setUserInfo(data) {\n    return {\n      type: SET_USER_INFO,\n      data,\n    };\n  },\n  setRedirectPath(data) {\n    return {\n      type: SET_REDIRECT,\n      data,\n    };\n  },\n})(App);\n"]},"metadata":{},"sourceType":"module"}