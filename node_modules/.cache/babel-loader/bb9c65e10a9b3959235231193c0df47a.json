{"ast":null,"code":"import _toConsumableArray from\"/Users/wlp6897/newProjects/cordovaProjects/installment/front-end/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _regeneratorRuntime from\"/Users/wlp6897/newProjects/cordovaProjects/installment/front-end/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/wlp6897/newProjects/cordovaProjects/installment/front-end/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";/**\n * 将数据提交localStore本地数据\n * @param {提交本地数据的名字} name\n * @param {提交本地数据的数据} data\n */export var setStorage=function setStorage(name,data){localStorage[name]=JSON.stringify(data);};/**\n * 获取localStore本地数据\n * @param {获取本地数据的名字} name\n */export var getStorage=function getStorage(name){return JSON.parse(localStorage.getItem(name));};/**\n * 移除localStore本地数据\n * @param {移除的本地数据的名字} name\n */export var removeStorage=function removeStorage(name){localStorage.removeItem(name);};/**\n * 发生修改时提交下更新时间。\n */export var setLocalUpdateTime=function setLocalUpdateTime(){var tmpTimeStamp=Date.parse(new Date());localStorage['updateTime']=tmpTimeStamp;};/**\n * 登录成功或者刷新token获取到token的浏览器时间\n */export var setTokenAuthTime=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var tmpTimeStamp;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:tmpTimeStamp=Date.parse(new Date());localStorage['tokenTime']=tmpTimeStamp;case 2:case\"end\":return _context.stop();}}},_callee);}));return function setTokenAuthTime(){return _ref.apply(this,arguments);};}();/**\n * 将map数据存储在本地，需要先转成数组格式。\n * @param {存储在local本地的名字} name\n * @param {Map对象结构数据} mapObj\n * @param {几层Map对象} level\n */export var mapObjectConvertToArray=function mapObjectConvertToArray(name,mapObj){var level=arguments.length>2&&arguments[2]!==undefined?arguments[2]:1;var tmpLocal=_toConsumableArray(mapObj);if(level===2){//层级为2的Map对象\ntmpLocal.forEach(function(item){item[1]=_toConsumableArray(item[1]);});}setStorage(name,tmpLocal);};/**\n * 获取本地的数据，并将数据由数组格式转换成map对象格式的数据。\n * @param {存储在local本地的名字} name\n * @param {存储在本地的数组} arr\n * @param {需要转成几层Map对象结构的} level\n */export var localArrayConvertToMapObjectInit=function localArrayConvertToMapObjectInit(name){var level=arguments.length>1&&arguments[1]!==undefined?arguments[1]:1;if(getStorage(name)!==undefined&&getStorage(name)!==null){var tmp=getStorage(name);if(level===2){//层级为2的Map对象\ntmp.forEach(function(item){item[1]=new Map(item[1]);});}return new Map(tmp);}else{return new Map();}};","map":null,"metadata":{},"sourceType":"module"}