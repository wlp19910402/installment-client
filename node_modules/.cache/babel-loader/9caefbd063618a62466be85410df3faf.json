{"ast":null,"code":"import \"antd-mobile/lib/toast/style\";\nimport _Toast from \"antd-mobile/lib/toast\";\nvar _jsxFileName = \"/Users/wlp6897/newProjects/cordovaProjects/installment/front-end/src/App.js\";\nimport React from 'react';\nimport Routers from '@/plugins/libs/routerMap';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { CLIENT_INTERFACE } from '@/plugins/libs/interfaceMap';\nimport { SET_USER_INFO, SET_REDIRECT } from '@/store/actions';\nimport axios from 'axios';\nimport { getStorage } from '@/plugins/common/storage';\nimport Login from '@/views/Login';\nimport Main from '@/views/Main';\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.fetchCheckLogin = async () => {\n      //用户是否已经登录过了\n      if (this.props.user.isAuth) {\n        if (window.location.pathname === '/login') {\n          window.location.pathname = '/main';\n        }\n\n        return;\n      } //本地是否有存储用户信息\n\n\n      let storageUserInfo = getStorage('storageUserInfo');\n\n      if (!storageUserInfo) {\n        // this.goLogin()\n        return;\n      } //本地存储的用户信息不能为空\n\n\n      if (!storageUserInfo.accountId || !storageUserInfo.accountType || !storageUserInfo.token) {\n        // this.goLogin()\n        return;\n      } //根据本地存储的用户信息，进行请求token是否有效登录，如果有效则更新token值\n\n\n      try {\n        let res = await axios({\n          url: CLIENT_INTERFACE.CHECK_IS_LOGIN,\n          method: 'post',\n          headers: {\n            'Content-Type': 'application/json; charset=UTF-8'\n          },\n          data: { ...storageUserInfo\n          }\n        });\n\n        if (res.data.err !== '0') {\n          _Toast.info(res.data.msg, 1);\n\n          return;\n        }\n\n        let userData = { ...storageUserInfo,\n          token: res.data.result.token\n        };\n        this.props.setUserInfo(userData);\n\n        if (window.location.pathname === '/login') {\n          window.location.pathname = '/main';\n        }\n\n        console.log('已经登录了');\n      } catch (err) {\n        console.log(err);\n      }\n    };\n  }\n\n  async componentDidMount() {\n    await this.fetchCheckLogin();\n  } //是否已经登录过及查证token是否是有效登录，并更新token\n\n\n  render() {\n    let isAuth = this.props.user.isAuth;\n    return /*#__PURE__*/React.createElement(Router, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 7\n      }\n    }, Routers.map((item, index) => {\n      if (item.path !== '/login') {\n        return /*#__PURE__*/React.createElement(Route, {\n          path: item.path,\n          key: index,\n          exact: true,\n          component: item.isAuth && !isAuth ? Login : item.component,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 19\n          }\n        });\n      } else {\n        return /*#__PURE__*/React.createElement(Route, {\n          path: item.path,\n          key: index,\n          exact: true,\n          component: isAuth ? Main : item.component,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 19\n          }\n        });\n      }\n    }));\n  }\n\n}\n\nexport default connect((state, props) => {\n  return state;\n}, {\n  setUserInfo(data) {\n    return {\n      type: SET_USER_INFO,\n      data\n    };\n  },\n\n  setRedirectPath(data) {\n    return {\n      type: SET_REDIRECT,\n      data\n    };\n  }\n\n})(App);","map":{"version":3,"sources":["/Users/wlp6897/newProjects/cordovaProjects/installment/front-end/src/App.js"],"names":["React","Routers","BrowserRouter","Router","Route","connect","CLIENT_INTERFACE","SET_USER_INFO","SET_REDIRECT","axios","getStorage","Login","Main","App","Component","fetchCheckLogin","props","user","isAuth","window","location","pathname","storageUserInfo","accountId","accountType","token","res","url","CHECK_IS_LOGIN","method","headers","data","err","info","msg","userData","result","setUserInfo","console","log","componentDidMount","render","map","item","index","path","component","state","type","setRedirectPath"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Routers from '@/plugins/libs/routerMap'\nimport {BrowserRouter as Router,Route}from 'react-router-dom'\nimport {connect} from 'react-redux'\nimport {CLIENT_INTERFACE}from '@/plugins/libs/interfaceMap'\nimport {SET_USER_INFO,SET_REDIRECT}from '@/store/actions'\nimport axios from 'axios'\nimport {getStorage}from '@/plugins/common/storage'\nimport { Toast} from 'antd-mobile';\nimport Login from '@/views/Login'\nimport Main from '@/views/Main'\nclass App extends React.Component{\n  async componentDidMount(){\n    await this.fetchCheckLogin()\n  }\n  //是否已经登录过及查证token是否是有效登录，并更新token\n  fetchCheckLogin=async()=>{\n    //用户是否已经登录过了\n    if(this.props.user.isAuth){\n      if(window.location.pathname==='/login') {window.location.pathname='/main'}\n      return\n    }\n    //本地是否有存储用户信息\n    let storageUserInfo=getStorage('storageUserInfo')\n    if(!storageUserInfo){\n      // this.goLogin()\n      return\n    }\n    //本地存储的用户信息不能为空\n    if(!storageUserInfo.accountId||!storageUserInfo.accountType||!storageUserInfo.token){\n      // this.goLogin()\n      return\n    }\n    //根据本地存储的用户信息，进行请求token是否有效登录，如果有效则更新token值\n    try{\n      let res = await axios({\n        url: CLIENT_INTERFACE.CHECK_IS_LOGIN,\n        method: 'post',\n        headers: { 'Content-Type': 'application/json; charset=UTF-8' },\n        data:{ ...storageUserInfo}\n      })\n      if(res.data.err!=='0'){\n        Toast.info(res.data.msg, 1);\n        return\n      }\n      let userData = { ...storageUserInfo, token:res.data.result.token}\n      this.props.setUserInfo(userData)\n      if(window.location.pathname==='/login') {window.location.pathname='/main'}\n      console.log('已经登录了')\n      }catch(err){\n        console.log(err)\n      }\n  }\n  render(){\n    let isAuth=this.props.user.isAuth\n    return (\n      <Router>\n        {Routers.map((item,index)=>{\n          if(item.path!=='/login'){\n          return (<Route path={item.path} key={index} exact component={item.isAuth&&!isAuth?Login:item.component}></Route>)\n        }else{\n          return (<Route path={item.path} key={index} exact component={isAuth?Main:item.component}></Route>)\n        }\n        })}\n      </Router>\n    );\n  }\n}\n\nexport default connect((state,props)=>{\n\treturn state\n},{\n\tsetUserInfo(data){\n\t\treturn{\n\t\t\ttype:SET_USER_INFO,\n\t\t\tdata\n\t\t}\n  },\n  setRedirectPath(data){\n    return{\n      type:SET_REDIRECT,\n      data\n    }\n  }\n})(App)\n"]},"metadata":{},"sourceType":"module"}