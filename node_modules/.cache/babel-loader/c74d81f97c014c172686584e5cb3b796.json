{"ast":null,"code":"import \"antd-mobile/lib/toast/style\";\nimport _Toast from \"antd-mobile/lib/toast\";\nvar _jsxFileName = \"/Users/wlp6897/newProjects/cordovaProjects/installment/front-end/src/App.js\";\nimport React from 'react';\nimport { HashRouter as Router, Route } from 'react-router-dom';\nimport Routers from '@/plugins/libs/routerMap';\nimport { connect } from 'react-redux';\nimport { CLIENT_INTERFACE } from '@/plugins/libs/interfaceMap';\nimport { SET_USER_INFO, SET_REDIRECT } from '@/store/actions';\nimport axios from '@/plugins/requestServer/httpClient';\nimport { getStorage } from '@/plugins/common/storage';\nimport Main from '@/views/Main';\nimport Login from '@/views/Login';\nimport { Base64 } from 'js-base64';\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.fetchCheckLogin = async () => {\n      let hash = window.location.hash;\n      let path = hash.substring(1, hash.length); //用户是否已经登录过了\n\n      if (this.props.user.loginFlag) {\n        if (path === '/login') {\n          window.location.hash = '#/main/home';\n        }\n\n        return;\n      } //本地是否有存储用户信息\n\n\n      let storageUserInfo = getStorage('storageUserInfo'); //根据本地存储的用户信息，进行请求token是否有效登录，如果有效则更新token值\n\n      try {\n        let res = await axios.get(CLIENT_INTERFACE.CHECK_IS_LOGIN);\n\n        if (res.data.err !== '0') {\n          if (path === '/login') return;\n\n          _Toast.info(res.data.msg, 1);\n\n          return;\n        }\n\n        let userData = { ...storageUserInfo,\n          ...res.data.result\n        };\n        this.props.setUserInfo(userData);\n\n        if (path === '/login') {\n          window.location.hash = '#/main/home';\n        }\n\n        console.log('已经登录了');\n      } catch (err) {\n        console.log(err); // Toast.info('请求异常', 1); //需删除\n      }\n    };\n  }\n\n  async componentWillMount() {\n    await this.fetchCheckLogin();\n  } //是否已经登录过及查证token是否是有效登录，并更新token\n\n\n  //检测token值的有效，如果在loginFlag=true登录状态的话，则没隔30秒进行检查token有效时间比当前时间是不是小于3分钟，如果小于三分钟则请求刷新token\n  async watchToken() {\n    if (this.props.user.loginFlag) {\n      window.clearTimeout(this.watchRefreshTime);\n      let {\n        token\n      } = getStorage('storageUserInfo');\n\n      if (token.trim() !== '') {\n        let jwtTokenArr = token.split('.');\n        let tokenExpiration = JSON.parse(Base64.decode(jwtTokenArr[1])).exp;\n        let minTime = Math.floor(Date.now() / 1000 + 3 * 60 * 60);\n        console.log(tokenExpiration);\n\n        if (tokenExpiration < minTime) {\n          let that = this;\n          this.watchRefreshTime = setTimeout(async () => {\n            await that.watchToken();\n          }, 1000 * 31);\n          return;\n        } //去请求刷新token\n\n\n        let res = await axios.get(CLIENT_INTERFACE.REFRESH_TOKEN);\n        console.log(\"刷新token的结果\", res);\n\n        if (res.data.err === \"0\") {\n          this.props.setUserInfo({\n            token: res.data.result.token\n          });\n          return;\n        }\n      }\n    }\n  }\n\n  render() {\n    let loginFlag = this.props.user.loginFlag;\n    return /*#__PURE__*/React.createElement(Router, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 7\n      }\n    }, Routers.map((item, index) => {\n      if (item.path !== '/login') {\n        return /*#__PURE__*/React.createElement(Route, {\n          path: item.path,\n          key: index,\n          exact: true,\n          component: item.loginFlag && !loginFlag ? Login : item.component,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 19\n          }\n        }); // return (\n        //   <Route path={item.path} key={index} exact={item.exact} component={item.component}></Route>)\n      } else {\n        return /*#__PURE__*/React.createElement(Route, {\n          path: item.path,\n          key: index,\n          exact: true,\n          component: loginFlag ? Main : item.component,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 19\n          }\n        });\n      }\n    }));\n  }\n\n}\n\nexport default connect((state, props) => {\n  return state;\n}, {\n  setUserInfo(data) {\n    return {\n      type: SET_USER_INFO,\n      data\n    };\n  },\n\n  setRedirectPath(data) {\n    return {\n      type: SET_REDIRECT,\n      data\n    };\n  }\n\n})(App);","map":{"version":3,"sources":["/Users/wlp6897/newProjects/cordovaProjects/installment/front-end/src/App.js"],"names":["React","HashRouter","Router","Route","Routers","connect","CLIENT_INTERFACE","SET_USER_INFO","SET_REDIRECT","axios","getStorage","Main","Login","Base64","App","Component","fetchCheckLogin","hash","window","location","path","substring","length","props","user","loginFlag","storageUserInfo","res","get","CHECK_IS_LOGIN","data","err","info","msg","userData","result","setUserInfo","console","log","componentWillMount","watchToken","clearTimeout","watchRefreshTime","token","trim","jwtTokenArr","split","tokenExpiration","JSON","parse","decode","exp","minTime","Math","floor","Date","now","that","setTimeout","REFRESH_TOKEN","render","map","item","index","component","state","type","setRedirectPath"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,UAAU,IAAIC,MAAtB,EAA6BC,KAA7B,QAAwC,kBAAxC;AACA,OAAOC,OAAP,MAAoB,0BAApB;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,SAAQC,gBAAR,QAA8B,6BAA9B;AACA,SAAQC,aAAR,EAAsBC,YAAtB,QAAwC,iBAAxC;AACA,OAAOC,KAAP,MAAkB,oCAAlB;AACA,SAAQC,UAAR,QAAwB,0BAAxB;AAEA,OAAOC,IAAP,MAAiB,cAAjB;AACA,OAAOC,KAAP,MAAkB,eAAlB;AACA,SAASC,MAAT,QAAuB,WAAvB;;AACA,MAAMC,GAAN,SAAkBd,KAAK,CAACe,SAAxB,CAAiC;AAAA;AAAA;;AAAA,SAK/BC,eAL+B,GAKf,YAAS;AACvB,UAAIC,IAAI,GAAEC,MAAM,CAACC,QAAP,CAAgBF,IAA1B;AACA,UAAIG,IAAI,GAAGH,IAAI,CAACI,SAAL,CAAe,CAAf,EAAiBJ,IAAI,CAACK,MAAtB,CAAX,CAFuB,CAGvB;;AACA,UAAG,KAAKC,KAAL,CAAWC,IAAX,CAAgBC,SAAnB,EAA6B;AAC3B,YAAGL,IAAI,KAAG,QAAV,EAAoB;AAACF,UAAAA,MAAM,CAACC,QAAP,CAAgBF,IAAhB,GAAqB,aAArB;AAAmC;;AACxD;AACD,OAPsB,CAQvB;;;AACA,UAAIS,eAAe,GAAChB,UAAU,CAAC,iBAAD,CAA9B,CATuB,CAUvB;;AACA,UAAG;AACD,YAAIiB,GAAG,GAAG,MAAMlB,KAAK,CAACmB,GAAN,CAAUtB,gBAAgB,CAACuB,cAA3B,CAAhB;;AACA,YAAGF,GAAG,CAACG,IAAJ,CAASC,GAAT,KAAe,GAAlB,EAAsB;AACpB,cAAGX,IAAI,KAAG,QAAV,EAAoB;;AACpB,iBAAMY,IAAN,CAAWL,GAAG,CAACG,IAAJ,CAASG,GAApB,EAAyB,CAAzB;;AACA;AACD;;AACD,YAAIC,QAAQ,GAAG,EAAE,GAAGR,eAAL;AAAsB,aAAGC,GAAG,CAACG,IAAJ,CAASK;AAAlC,SAAf;AACA,aAAKZ,KAAL,CAAWa,WAAX,CAAuBF,QAAvB;;AACA,YAAGd,IAAI,KAAG,QAAV,EAAoB;AAACF,UAAAA,MAAM,CAACC,QAAP,CAAgBF,IAAhB,GAAqB,aAArB;AAAmC;;AACxDoB,QAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACD,OAXD,CAWC,OAAMP,GAAN,EAAU;AACTM,QAAAA,OAAO,CAACC,GAAR,CAAYP,GAAZ,EADS,CAET;AACD;AACF,KA/B8B;AAAA;;AAC/B,QAAMQ,kBAAN,GAA0B;AACxB,UAAM,KAAKvB,eAAL,EAAN;AACD,GAH8B,CAI/B;;;AA4BA;AACA,QAAMwB,UAAN,GAAkB;AAChB,QAAG,KAAKjB,KAAL,CAAWC,IAAX,CAAgBC,SAAnB,EAA6B;AAC3BP,MAAAA,MAAM,CAACuB,YAAP,CAAoB,KAAKC,gBAAzB;AACA,UAAI;AAACC,QAAAA;AAAD,UAAQjC,UAAU,CAAC,iBAAD,CAAtB;;AACA,UAAIiC,KAAK,CAACC,IAAN,OAAiB,EAArB,EAAyB;AACvB,YAAIC,WAAW,GAAGF,KAAK,CAACG,KAAN,CAAY,GAAZ,CAAlB;AACA,YAAIC,eAAe,GAAGC,IAAI,CAACC,KAAL,CAAWpC,MAAM,CAACqC,MAAP,CAAcL,WAAW,CAAC,CAAD,CAAzB,CAAX,EAA0CM,GAAhE;AACA,YAAIC,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWC,IAAI,CAACC,GAAL,KAAW,IAAX,GAAgB,IAAE,EAAF,GAAK,EAAhC,CAAd;AACAnB,QAAAA,OAAO,CAACC,GAAR,CAAYS,eAAZ;;AACA,YAAGA,eAAe,GAACK,OAAnB,EAA2B;AACzB,cAAIK,IAAI,GAAG,IAAX;AACA,eAAKf,gBAAL,GAAsBgB,UAAU,CAAC,YAAY;AAC3C,kBAAMD,IAAI,CAACjB,UAAL,EAAN;AACD,WAF+B,EAE7B,OAAO,EAFsB,CAAhC;AAGA;AACD,SAXsB,CAYvB;;;AACA,YAAIb,GAAG,GAAG,MAAMlB,KAAK,CAACmB,GAAN,CAAUtB,gBAAgB,CAACqD,aAA3B,CAAhB;AACAtB,QAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAAyBX,GAAzB;;AACA,YAAGA,GAAG,CAACG,IAAJ,CAASC,GAAT,KAAe,GAAlB,EAAsB;AACpB,eAAKR,KAAL,CAAWa,WAAX,CAAuB;AAACO,YAAAA,KAAK,EAAChB,GAAG,CAACG,IAAJ,CAASK,MAAT,CAAgBQ;AAAvB,WAAvB;AACA;AACD;AACF;AACF;AACF;;AAEDiB,EAAAA,MAAM,GAAE;AACN,QAAInC,SAAS,GAAC,KAAKF,KAAL,CAAWC,IAAX,CAAgBC,SAA9B;AACA,wBACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGrB,OAAO,CAACyD,GAAR,CAAY,CAACC,IAAD,EAAMC,KAAN,KAAc;AACzB,UAAGD,IAAI,CAAC1C,IAAL,KAAY,QAAf,EAAwB;AACxB,4BAAQ,oBAAC,KAAD;AAAO,UAAA,IAAI,EAAE0C,IAAI,CAAC1C,IAAlB;AAAwB,UAAA,GAAG,EAAE2C,KAA7B;AAAoC,UAAA,KAAK,MAAzC;AAA0C,UAAA,SAAS,EAAED,IAAI,CAACrC,SAAL,IAAgB,CAACA,SAAjB,GAA2Bb,KAA3B,GAAiCkD,IAAI,CAACE,SAA3F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAR,CADwB,CAExB;AACA;AACD,OAJC,MAIG;AACH,4BAAQ,oBAAC,KAAD;AAAO,UAAA,IAAI,EAAEF,IAAI,CAAC1C,IAAlB;AAAwB,UAAA,GAAG,EAAE2C,KAA7B;AAAoC,UAAA,KAAK,MAAzC;AAA0C,UAAA,SAAS,EAAEtC,SAAS,GAACd,IAAD,GAAMmD,IAAI,CAACE,SAAzE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAR;AACD;AACA,KARA,CADH,CADF;AAcD;;AA5E8B;;AA+EjC,eAAe3D,OAAO,CAAC,CAAC4D,KAAD,EAAO1C,KAAP,KAAe;AACrC,SAAO0C,KAAP;AACA,CAFqB,EAEpB;AACD7B,EAAAA,WAAW,CAACN,IAAD,EAAM;AAChB,WAAM;AACLoC,MAAAA,IAAI,EAAC3D,aADA;AAELuB,MAAAA;AAFK,KAAN;AAIC,GAND;;AAOAqC,EAAAA,eAAe,CAACrC,IAAD,EAAM;AACnB,WAAM;AACJoC,MAAAA,IAAI,EAAC1D,YADD;AAEJsB,MAAAA;AAFI,KAAN;AAID;;AAZD,CAFoB,CAAP,CAeZhB,GAfY,CAAf","sourcesContent":["import React from 'react';\nimport {HashRouter as Router,Route}from 'react-router-dom'\nimport Routers from '@/plugins/libs/routerMap'\nimport {connect} from 'react-redux'\nimport {CLIENT_INTERFACE}from '@/plugins/libs/interfaceMap'\nimport {SET_USER_INFO,SET_REDIRECT}from '@/store/actions'\nimport axios from '@/plugins/requestServer/httpClient'\nimport {getStorage}from '@/plugins/common/storage'\nimport { Toast} from 'antd-mobile';\nimport Main from '@/views/Main';\nimport Login from '@/views/Login'\nimport { Base64 } from 'js-base64'\nclass App extends React.Component{\n  async componentWillMount(){\n    await this.fetchCheckLogin()\n  }\n  //是否已经登录过及查证token是否是有效登录，并更新token\n  fetchCheckLogin=async()=>{\n    let hash =window.location.hash\n    let path = hash.substring(1,hash.length)\n    //用户是否已经登录过了\n    if(this.props.user.loginFlag){\n      if(path==='/login') {window.location.hash='#/main/home'}\n      return\n    }\n    //本地是否有存储用户信息\n    let storageUserInfo=getStorage('storageUserInfo')\n    //根据本地存储的用户信息，进行请求token是否有效登录，如果有效则更新token值\n    try{\n      let res = await axios.get(CLIENT_INTERFACE.CHECK_IS_LOGIN)\n      if(res.data.err!=='0'){\n        if(path==='/login') return\n        Toast.info(res.data.msg, 1);\n        return\n      }\n      let userData = { ...storageUserInfo, ...res.data.result}\n      this.props.setUserInfo(userData)\n      if(path==='/login') {window.location.hash='#/main/home'}\n      console.log('已经登录了')\n    }catch(err){\n      console.log(err)\n      // Toast.info('请求异常', 1); //需删除\n    }\n  }\n  //检测token值的有效，如果在loginFlag=true登录状态的话，则没隔30秒进行检查token有效时间比当前时间是不是小于3分钟，如果小于三分钟则请求刷新token\n  async watchToken(){\n    if(this.props.user.loginFlag){\n      window.clearTimeout(this.watchRefreshTime)\n      let {token}=getStorage('storageUserInfo')\n      if (token.trim() !== '') {\n        let jwtTokenArr = token.split('.')\n        let tokenExpiration = JSON.parse(Base64.decode(jwtTokenArr[1])).exp\n        let minTime = Math.floor(Date.now()/1000+3*60*60)\n        console.log(tokenExpiration,)\n        if(tokenExpiration<minTime){\n          let that = this\n          this.watchRefreshTime=setTimeout(async () => {\n            await that.watchToken()\n          }, 1000 * 31)\n          return\n        }\n        //去请求刷新token\n        let res = await axios.get(CLIENT_INTERFACE.REFRESH_TOKEN)\n        console.log(\"刷新token的结果\",res)\n        if(res.data.err===\"0\"){\n          this.props.setUserInfo({token:res.data.result.token})\n          return\n        }\n      }\n    }\n  }\n\n  render(){\n    let loginFlag=this.props.user.loginFlag\n    return (\n      <Router>\n        {Routers.map((item,index)=>{\n          if(item.path!=='/login'){\n          return (<Route path={item.path} key={index} exact component={item.loginFlag&&!loginFlag?Login:item.component}></Route>)\n          // return (\n          //   <Route path={item.path} key={index} exact={item.exact} component={item.component}></Route>)\n        }else{\n          return (<Route path={item.path} key={index} exact component={loginFlag?Main:item.component}></Route>)\n        }\n        })}\n\n      </Router>\n    );\n  }\n}\n\nexport default connect((state,props)=>{\n\treturn state\n},{\n\tsetUserInfo(data){\n\t\treturn{\n\t\t\ttype:SET_USER_INFO,\n\t\t\tdata\n\t\t}\n  },\n  setRedirectPath(data){\n    return{\n      type:SET_REDIRECT,\n      data\n    }\n  }\n})(App)\n"]},"metadata":{},"sourceType":"module"}