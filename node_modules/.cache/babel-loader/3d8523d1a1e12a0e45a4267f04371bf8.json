{"ast":null,"code":"/**\n *  base64.ts\n *\n *  Licensed under the BSD 3-Clause License.\n *    http://opensource.org/licenses/BSD-3-Clause\n *\n *  References:\n *    http://en.wikipedia.org/wiki/Base64\n *\n * @author Dan Kogai (https://github.com/dankogai)\n */\nconst version = '3.5.2';\n/**\n * @deprecated use lowercase `version`.\n */\n\nconst VERSION = version;\n\nconst _hasatob = typeof atob === 'function';\n\nconst _hasbtoa = typeof btoa === 'function';\n\nconst _hasBuffer = typeof Buffer === 'function';\n\nconst _TD = typeof TextDecoder === 'function' ? new TextDecoder() : undefined;\n\nconst _TE = typeof TextEncoder === 'function' ? new TextEncoder() : undefined;\n\nconst b64ch = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\nconst b64chs = [...b64ch];\n\nconst b64tab = (a => {\n  let tab = {};\n  a.forEach((c, i) => tab[c] = i);\n  return tab;\n})(b64chs);\n\nconst b64re = /^(?:[A-Za-z\\d+\\/]{4})*?(?:[A-Za-z\\d+\\/]{2}(?:==)?|[A-Za-z\\d+\\/]{3}=?)?$/;\n\nconst _fromCC = String.fromCharCode.bind(String);\n\nconst _U8Afrom = typeof Uint8Array.from === 'function' ? Uint8Array.from.bind(Uint8Array) : (it, fn = x => x) => new Uint8Array(Array.prototype.slice.call(it, 0).map(fn));\n\nconst _mkUriSafe = src => src.replace(/[+\\/]/g, m0 => m0 == '+' ? '-' : '_').replace(/=+$/m, '');\n\nconst _tidyB64 = s => s.replace(/[^A-Za-z0-9\\+\\/]/g, '');\n/**\n * polyfill version of `btoa`\n */\n\n\nconst btoaPolyfill = bin => {\n  // console.log('polyfilled');\n  let u32,\n      c0,\n      c1,\n      c2,\n      asc = '';\n  const pad = bin.length % 3;\n\n  for (let i = 0; i < bin.length;) {\n    if ((c0 = bin.charCodeAt(i++)) > 255 || (c1 = bin.charCodeAt(i++)) > 255 || (c2 = bin.charCodeAt(i++)) > 255) throw new TypeError('invalid character found');\n    u32 = c0 << 16 | c1 << 8 | c2;\n    asc += b64chs[u32 >> 18 & 63] + b64chs[u32 >> 12 & 63] + b64chs[u32 >> 6 & 63] + b64chs[u32 & 63];\n  }\n\n  return pad ? asc.slice(0, pad - 3) + \"===\".substring(pad) : asc;\n};\n/**\n * does what `window.btoa` of web browsers do.\n * @param {String} bin binary string\n * @returns {string} Base64-encoded string\n */\n\n\nconst _btoa = _hasbtoa ? bin => btoa(bin) : _hasBuffer ? bin => Buffer.from(bin, 'binary').toString('base64') : btoaPolyfill;\n\nconst _fromUint8Array = _hasBuffer ? u8a => Buffer.from(u8a).toString('base64') : u8a => {\n  // cf. https://stackoverflow.com/questions/12710001/how-to-convert-uint8-array-to-base64-encoded-string/12713326#12713326\n  const maxargs = 0x1000;\n  let strs = [];\n\n  for (let i = 0, l = u8a.length; i < l; i += maxargs) {\n    strs.push(_fromCC.apply(null, u8a.subarray(i, i + maxargs)));\n  }\n\n  return _btoa(strs.join(''));\n};\n/**\n * converts a Uint8Array to a Base64 string.\n * @param {boolean} [urlsafe] URL-and-filename-safe a la RFC4648 ยง5\n * @returns {string} Base64 string\n */\n\n\nconst fromUint8Array = (u8a, urlsafe = false) => urlsafe ? _mkUriSafe(_fromUint8Array(u8a)) : _fromUint8Array(u8a); // This trick is found broken https://github.com/dankogai/js-base64/issues/130\n// const utob = (src: string) => unescape(encodeURIComponent(src));\n// reverting good old fationed regexp\n\n\nconst cb_utob = c => {\n  if (c.length < 2) {\n    var cc = c.charCodeAt(0);\n    return cc < 0x80 ? c : cc < 0x800 ? _fromCC(0xc0 | cc >>> 6) + _fromCC(0x80 | cc & 0x3f) : _fromCC(0xe0 | cc >>> 12 & 0x0f) + _fromCC(0x80 | cc >>> 6 & 0x3f) + _fromCC(0x80 | cc & 0x3f);\n  } else {\n    var cc = 0x10000 + (c.charCodeAt(0) - 0xD800) * 0x400 + (c.charCodeAt(1) - 0xDC00);\n    return _fromCC(0xf0 | cc >>> 18 & 0x07) + _fromCC(0x80 | cc >>> 12 & 0x3f) + _fromCC(0x80 | cc >>> 6 & 0x3f) + _fromCC(0x80 | cc & 0x3f);\n  }\n};\n\nconst re_utob = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFFF]|[^\\x00-\\x7F]/g;\n/**\n * @deprecated should have been internal use only.\n * @param {string} src UTF-8 string\n * @returns {string} UTF-16 string\n */\n\nconst utob = u => u.replace(re_utob, cb_utob); //\n\n\nconst _encode = _hasBuffer ? s => Buffer.from(s, 'utf8').toString('base64') : _TE ? s => _fromUint8Array(_TE.encode(s)) : s => _btoa(utob(s));\n/**\n * converts a UTF-8-encoded string to a Base64 string.\n * @param {boolean} [urlsafe] if `true` make the result URL-safe\n * @returns {string} Base64 string\n */\n\n\nconst encode = (src, urlsafe = false) => urlsafe ? _mkUriSafe(_encode(src)) : _encode(src);\n/**\n * converts a UTF-8-encoded string to URL-safe Base64 RFC4648 ยง5.\n * @returns {string} Base64 string\n */\n\n\nconst encodeURI = src => encode(src, true); // This trick is found broken https://github.com/dankogai/js-base64/issues/130\n// const btou = (src: string) => decodeURIComponent(escape(src));\n// reverting good old fationed regexp\n\n\nconst re_btou = /[\\xC0-\\xDF][\\x80-\\xBF]|[\\xE0-\\xEF][\\x80-\\xBF]{2}|[\\xF0-\\xF7][\\x80-\\xBF]{3}/g;\n\nconst cb_btou = cccc => {\n  switch (cccc.length) {\n    case 4:\n      var cp = (0x07 & cccc.charCodeAt(0)) << 18 | (0x3f & cccc.charCodeAt(1)) << 12 | (0x3f & cccc.charCodeAt(2)) << 6 | 0x3f & cccc.charCodeAt(3),\n          offset = cp - 0x10000;\n      return _fromCC((offset >>> 10) + 0xD800) + _fromCC((offset & 0x3FF) + 0xDC00);\n\n    case 3:\n      return _fromCC((0x0f & cccc.charCodeAt(0)) << 12 | (0x3f & cccc.charCodeAt(1)) << 6 | 0x3f & cccc.charCodeAt(2));\n\n    default:\n      return _fromCC((0x1f & cccc.charCodeAt(0)) << 6 | 0x3f & cccc.charCodeAt(1));\n  }\n};\n/**\n * @deprecated should have been internal use only.\n * @param {string} src UTF-16 string\n * @returns {string} UTF-8 string\n */\n\n\nconst btou = b => b.replace(re_btou, cb_btou);\n/**\n * polyfill version of `atob`\n */\n\n\nconst atobPolyfill = asc => {\n  // console.log('polyfilled');\n  asc = asc.replace(/\\s+/g, '');\n  if (!b64re.test(asc)) throw new TypeError('malformed base64.');\n  asc += '=='.slice(2 - (asc.length & 3));\n  let u24,\n      bin = '',\n      r1,\n      r2;\n\n  for (let i = 0; i < asc.length;) {\n    u24 = b64tab[asc.charAt(i++)] << 18 | b64tab[asc.charAt(i++)] << 12 | (r1 = b64tab[asc.charAt(i++)]) << 6 | (r2 = b64tab[asc.charAt(i++)]);\n    bin += r1 === 64 ? _fromCC(u24 >> 16 & 255) : r2 === 64 ? _fromCC(u24 >> 16 & 255, u24 >> 8 & 255) : _fromCC(u24 >> 16 & 255, u24 >> 8 & 255, u24 & 255);\n  }\n\n  return bin;\n};\n/**\n * does what `window.atob` of web browsers do.\n * @param {String} asc Base64-encoded string\n * @returns {string} binary string\n */\n\n\nconst _atob = _hasatob ? asc => atob(_tidyB64(asc)) : _hasBuffer ? asc => Buffer.from(asc, 'base64').toString('binary') : atobPolyfill; //\n\n\nconst _toUint8Array = _hasBuffer ? a => _U8Afrom(Buffer.from(a, 'base64')) : a => _U8Afrom(_atob(a), c => c.charCodeAt(0));\n/**\n * converts a Base64 string to a Uint8Array.\n */\n\n\nconst toUint8Array = a => _toUint8Array(_unURI(a)); //\n\n\nconst _decode = _hasBuffer ? a => Buffer.from(a, 'base64').toString('utf8') : _TD ? a => _TD.decode(_toUint8Array(a)) : a => btou(_atob(a));\n\nconst _unURI = a => _tidyB64(a.replace(/[-_]/g, m0 => m0 == '-' ? '+' : '/'));\n/**\n * converts a Base64 string to a UTF-8 string.\n * @param {String} src Base64 string.  Both normal and URL-safe are supported\n * @returns {string} UTF-8 string\n */\n\n\nconst decode = src => _decode(_unURI(src)); //\n\n\nconst _noEnum = v => {\n  return {\n    value: v,\n    enumerable: false,\n    writable: true,\n    configurable: true\n  };\n};\n/**\n * extend String.prototype with relevant methods\n */\n\n\nconst extendString = function () {\n  const _add = (name, body) => Object.defineProperty(String.prototype, name, _noEnum(body));\n\n  _add('fromBase64', function () {\n    return decode(this);\n  });\n\n  _add('toBase64', function (urlsafe) {\n    return encode(this, urlsafe);\n  });\n\n  _add('toBase64URI', function () {\n    return encode(this, true);\n  });\n\n  _add('toBase64URL', function () {\n    return encode(this, true);\n  });\n\n  _add('toUint8Array', function () {\n    return toUint8Array(this);\n  });\n};\n/**\n * extend Uint8Array.prototype with relevant methods\n */\n\n\nconst extendUint8Array = function () {\n  const _add = (name, body) => Object.defineProperty(Uint8Array.prototype, name, _noEnum(body));\n\n  _add('toBase64', function (urlsafe) {\n    return fromUint8Array(this, urlsafe);\n  });\n\n  _add('toBase64URI', function () {\n    return fromUint8Array(this, true);\n  });\n\n  _add('toBase64URL', function () {\n    return fromUint8Array(this, true);\n  });\n};\n/**\n * extend Builtin prototypes with relevant methods\n */\n\n\nconst extendBuiltins = () => {\n  extendString();\n  extendUint8Array();\n};\n\nconst gBase64 = {\n  version: version,\n  VERSION: VERSION,\n  atob: _atob,\n  atobPolyfill: atobPolyfill,\n  btoa: _btoa,\n  btoaPolyfill: btoaPolyfill,\n  fromBase64: decode,\n  toBase64: encode,\n  encode: encode,\n  encodeURI: encodeURI,\n  encodeURL: encodeURI,\n  utob: utob,\n  btou: btou,\n  decode: decode,\n  fromUint8Array: fromUint8Array,\n  toUint8Array: toUint8Array,\n  extendString: extendString,\n  extendUint8Array: extendUint8Array,\n  extendBuiltins: extendBuiltins\n}; // makecjs:CUT //\n\nexport { version };\nexport { VERSION };\nexport { _atob as atob };\nexport { atobPolyfill };\nexport { _btoa as btoa };\nexport { btoaPolyfill };\nexport { decode as fromBase64 };\nexport { encode as toBase64 };\nexport { utob };\nexport { encode };\nexport { encodeURI };\nexport { encodeURI as encodeURL };\nexport { btou };\nexport { decode };\nexport { fromUint8Array };\nexport { toUint8Array };\nexport { extendString };\nexport { extendUint8Array };\nexport { extendBuiltins }; // and finally,\n\nexport { gBase64 as Base64 };","map":null,"metadata":{},"sourceType":"module"}