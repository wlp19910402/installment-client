{"ast":null,"code":"import \"antd-mobile/lib/toast/style\";\nimport _Toast from \"antd-mobile/lib/toast\";\nvar _jsxFileName = \"/Users/wlp6897/newProjects/cordovaProjects/installment/front-end/src/App.js\";\nimport React from 'react';\nimport { HashRouter as Router, Route } from 'react-router-dom';\nimport Routers from '@/plugins/libs/routerMap';\nimport { connect } from 'react-redux';\nimport { CLIENT_INTERFACE } from '@/plugins/libs/interfaceMap';\nimport { SET_USER_INFO, SET_REDIRECT } from '@/store/actions';\nimport axios from '@/plugins/requestServer/httpClient';\nimport { getStorage } from '@/plugins/common/storage';\nimport Main from '@/views/Main'; // import Login from '@/views/Login'\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.fetchCheckLogin = async () => {\n      //用户是否已经登录过了\n      if (this.props.user.loginFlag) {\n        if (window.location.pathname === '/login') {\n          window.location.pathname = '/main/home';\n        }\n\n        return;\n      } //本地是否有存储用户信息\n\n\n      let storageUserInfo = getStorage('storageUserInfo'); //根据本地存储的用户信息，进行请求token是否有效登录，如果有效则更新token值\n\n      try {\n        let res = await axios.post(CLIENT_INTERFACE.CHECK_IS_LOGIN, { ...storageUserInfo\n        });\n\n        if (res.data.err !== '0') {\n          _Toast.info(res.data.msg, 1);\n\n          return;\n        }\n\n        let userData = { ...storageUserInfo,\n          ...res.data.result\n        };\n        this.props.setUserInfo(userData);\n        console.log(res.data.result);\n\n        if (window.location.pathname === '/login') {\n          window.location.pathname = '/main/home';\n        }\n\n        console.log('已经登录了');\n      } catch (err) {\n        console.log(err);\n\n        _Toast.info('请求异常', 1); //需删除\n\n      }\n    };\n  }\n\n  async componentDidMount() {\n    await this.fetchCheckLogin();\n  } //是否已经登录过及查证token是否是有效登录，并更新token\n\n\n  render() {\n    let loginFlag = this.props.user.loginFlag;\n    return /*#__PURE__*/React.createElement(Router, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 7\n      }\n    }, Routers.map((item, index) => {\n      if (item.path !== '/login') {\n        // return (<Route path={item.path} key={index} exact component={item.loginFlag&&!loginFlag?Login:item.component}></Route>)\n        return /*#__PURE__*/React.createElement(\"div\", {\n          key: index,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 19\n          }\n        }, /*#__PURE__*/React.createElement(Route, {\n          path: item.path,\n          key: index,\n          exact: item.exact,\n          component: item.component,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 13\n          }\n        }));\n      } else {\n        return /*#__PURE__*/React.createElement(Route, {\n          path: item.path,\n          key: index,\n          exact: true,\n          component: loginFlag ? Main : item.component,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 19\n          }\n        });\n      }\n    }));\n  }\n\n}\n\nexport default connect((state, props) => {\n  return state;\n}, {\n  setUserInfo(data) {\n    return {\n      type: SET_USER_INFO,\n      data\n    };\n  },\n\n  setRedirectPath(data) {\n    return {\n      type: SET_REDIRECT,\n      data\n    };\n  }\n\n})(App);","map":{"version":3,"sources":["/Users/wlp6897/newProjects/cordovaProjects/installment/front-end/src/App.js"],"names":["React","HashRouter","Router","Route","Routers","connect","CLIENT_INTERFACE","SET_USER_INFO","SET_REDIRECT","axios","getStorage","Main","App","Component","fetchCheckLogin","props","user","loginFlag","window","location","pathname","storageUserInfo","res","post","CHECK_IS_LOGIN","data","err","info","msg","userData","result","setUserInfo","console","log","componentDidMount","render","map","item","index","path","exact","component","state","type","setRedirectPath"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {HashRouter as Router,Route}from 'react-router-dom'\nimport Routers from '@/plugins/libs/routerMap'\nimport {connect} from 'react-redux'\nimport {CLIENT_INTERFACE}from '@/plugins/libs/interfaceMap'\nimport {SET_USER_INFO,SET_REDIRECT}from '@/store/actions'\nimport axios from '@/plugins/requestServer/httpClient'\nimport {getStorage}from '@/plugins/common/storage'\nimport { Toast} from 'antd-mobile';\nimport Main from '@/views/Main';\n// import Login from '@/views/Login'\n\n\nclass App extends React.Component{\n  async componentDidMount(){\n    await this.fetchCheckLogin()\n  }\n  //是否已经登录过及查证token是否是有效登录，并更新token\n  fetchCheckLogin=async()=>{\n    //用户是否已经登录过了\n    if(this.props.user.loginFlag){\n      if(window.location.pathname==='/login') {window.location.pathname='/main/home'}\n      return\n    }\n    //本地是否有存储用户信息\n    let storageUserInfo=getStorage('storageUserInfo')\n    //根据本地存储的用户信息，进行请求token是否有效登录，如果有效则更新token值\n    try{\n      let res = await axios.post(CLIENT_INTERFACE.CHECK_IS_LOGIN,{ ...storageUserInfo})\n      if(res.data.err!=='0'){\n        Toast.info(res.data.msg, 1);\n        return\n      }\n      let userData = { ...storageUserInfo, ...res.data.result}\n      this.props.setUserInfo(userData)\n      console.log(res.data.result)\n      if(window.location.pathname==='/login') {window.location.pathname='/main/home'}\n      console.log('已经登录了')\n    }catch(err){\n      console.log(err)\n      Toast.info('请求异常', 1); //需删除\n    }\n  }\n  render(){\n    let loginFlag=this.props.user.loginFlag\n    return (\n\n      <Router>\n        {Routers.map((item,index)=>{\n          if(item.path!=='/login'){\n          // return (<Route path={item.path} key={index} exact component={item.loginFlag&&!loginFlag?Login:item.component}></Route>)\n          return (<div key={index}>\n            <Route path={item.path} key={index} exact={item.exact} component={item.component}></Route></div>)\n        }else{\n          return (<Route path={item.path} key={index} exact component={loginFlag?Main:item.component}></Route>)\n        }\n        })}\n\n      </Router>\n    );\n  }\n}\n\nexport default connect((state,props)=>{\n\treturn state\n},{\n\tsetUserInfo(data){\n\t\treturn{\n\t\t\ttype:SET_USER_INFO,\n\t\t\tdata\n\t\t}\n  },\n  setRedirectPath(data){\n    return{\n      type:SET_REDIRECT,\n      data\n    }\n  }\n})(App)\n"]},"metadata":{},"sourceType":"module"}