{"ast":null,"code":"import Axios from 'axios';\nimport qs from 'qs';\nimport { getStorage } from '@/plugins/common/storage';\nconst axios = Axios.create();\naxios.defaults.headers.post['Content-Type'] = \"application/json;charset=UTF-8\"; // axios.defaults.headers.post['accountId']=accountId\n// axios.defaults.headers.post[\"accountType\"]=accountType\n// axios.defaults.headers.post[\"token\"]=token\n\naxios.interceptors.request.use(config => {\n  let storageUserInfo = getStorage('storageUserInfo');\n\n  if (!storageUserInfo) {\n    storageUserInfo = {\n      accountId: null,\n      accountType: null,\n      token: null\n    };\n  } //本地存储的用户信息不能为空\n\n\n  if (!storageUserInfo.accountId || !storageUserInfo.accountType || !storageUserInfo.token) {\n    storageUserInfo = {\n      accountId: null,\n      accountType: null,\n      token: null\n    };\n  }\n\n  let {\n    accountId,\n    accountType,\n    token\n  } = storageUserInfo;\n  config.headers({\n    accountId,\n    accountType,\n    token\n  });\n  config.headers.accountId = accountId;\n  config.headers.accountType = accountType;\n  config.headers.accountId = accountId;\n\n  if (config.method === 'post') {// console.log(config.data)\n    // config.data = qs.stringify(config.data);\n  }\n\n  return config;\n}); // axios.interceptors.response.use(\n//   (response) => {\n//     console.log(response)\n//       let data = response.data;\n//       response.data = data.data;\n//       return response;\n//   },\n//   (error) => {\n//     console.log(error)\n//       return Promise.reject(error);\n//   }\n// );\n\naxios.interceptors.response.use(function (response) {\n  // 对响应数据做点什么\n  return response;\n}, function (error) {\n  // 对响应错误做点什么\n  return Promise.reject(error);\n});\nexport default axios;","map":{"version":3,"sources":["/Users/wlp6897/newProjects/cordovaProjects/installment/front-end/src/plugins/requestServer/httpClient.js"],"names":["Axios","qs","getStorage","axios","create","defaults","headers","post","interceptors","request","use","config","storageUserInfo","accountId","accountType","token","method","response","error","Promise","reject"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,EAAP,MAAe,IAAf;AACA,SAAQC,UAAR,QAAwB,0BAAxB;AAIA,MAAMC,KAAK,GAAGH,KAAK,CAACI,MAAN,EAAd;AACAD,KAAK,CAACE,QAAN,CAAeC,OAAf,CAAuBC,IAAvB,CAA4B,cAA5B,IAA4C,gCAA5C,C,CACA;AACA;AACA;;AAEAJ,KAAK,CAACK,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CAAgCC,MAAD,IAAU;AACvC,MAAIC,eAAe,GAACV,UAAU,CAAC,iBAAD,CAA9B;;AAEF,MAAG,CAACU,eAAJ,EAAoB;AAClBA,IAAAA,eAAe,GAAC;AAACC,MAAAA,SAAS,EAAC,IAAX;AAAgBC,MAAAA,WAAW,EAAC,IAA5B;AAAiCC,MAAAA,KAAK,EAAC;AAAvC,KAAhB;AACD,GALwC,CAOxC;;;AACA,MAAG,CAACH,eAAe,CAACC,SAAjB,IAA4B,CAACD,eAAe,CAACE,WAA7C,IAA0D,CAACF,eAAe,CAACG,KAA9E,EAAoF;AACnFH,IAAAA,eAAe,GAAC;AAACC,MAAAA,SAAS,EAAC,IAAX;AAAgBC,MAAAA,WAAW,EAAC,IAA5B;AAAiCC,MAAAA,KAAK,EAAC;AAAvC,KAAhB;AACD;;AACD,MAAI;AAACF,IAAAA,SAAD;AAAWC,IAAAA,WAAX;AAAuBC,IAAAA;AAAvB,MAAgCH,eAApC;AACED,EAAAA,MAAM,CAACL,OAAP,CAAe;AAACO,IAAAA,SAAD;AAAWC,IAAAA,WAAX;AAAuBC,IAAAA;AAAvB,GAAf;AACAJ,EAAAA,MAAM,CAACL,OAAP,CAAeO,SAAf,GAAyBA,SAAzB;AACAF,EAAAA,MAAM,CAACL,OAAP,CAAeQ,WAAf,GAA2BA,WAA3B;AACAH,EAAAA,MAAM,CAACL,OAAP,CAAeO,SAAf,GAAyBA,SAAzB;;AACA,MAAIF,MAAM,CAACK,MAAP,KAAkB,MAAtB,EAA8B,CAC5B;AACA;AACD;;AACD,SAAOL,MAAP;AACD,CArBD,E,CAuBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAR,KAAK,CAACK,YAAN,CAAmBS,QAAnB,CAA4BP,GAA5B,CAAgC,UAAUO,QAAV,EAAoB;AAClD;AACA,SAAOA,QAAP;AACD,CAHD,EAGG,UAAUC,KAAV,EAAiB;AAClB;AACA,SAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACD,CAND;AAQA,eAAef,KAAf","sourcesContent":["import Axios from 'axios'\nimport qs from 'qs'\nimport {getStorage}from '@/plugins/common/storage'\n\n\n\nconst axios = Axios.create();\naxios.defaults.headers.post['Content-Type']=\"application/json;charset=UTF-8\"\n// axios.defaults.headers.post['accountId']=accountId\n// axios.defaults.headers.post[\"accountType\"]=accountType\n// axios.defaults.headers.post[\"token\"]=token\n\naxios.interceptors.request.use((config)=>{\n  let storageUserInfo=getStorage('storageUserInfo')\n\nif(!storageUserInfo){\n  storageUserInfo={accountId:null,accountType:null,token:null}\n}\n\n //本地存储的用户信息不能为空\n if(!storageUserInfo.accountId||!storageUserInfo.accountType||!storageUserInfo.token){\n  storageUserInfo={accountId:null,accountType:null,token:null}\n}\nlet {accountId,accountType,token} = storageUserInfo\n  config.headers({accountId,accountType,token})\n  config.headers.accountId=accountId\n  config.headers.accountType=accountType\n  config.headers.accountId=accountId\n  if (config.method === 'post') {\n    // console.log(config.data)\n    // config.data = qs.stringify(config.data);\n  }\n  return config;\n})\n\n// axios.interceptors.response.use(\n//   (response) => {\n//     console.log(response)\n//       let data = response.data;\n//       response.data = data.data;\n//       return response;\n//   },\n//   (error) => {\n//     console.log(error)\n//       return Promise.reject(error);\n//   }\n// );\n\naxios.interceptors.response.use(function (response) {\n  // 对响应数据做点什么\n  return response;\n}, function (error) {\n  // 对响应错误做点什么\n  return Promise.reject(error);\n});\n\nexport default axios;"]},"metadata":{},"sourceType":"module"}